{
  "_args": [
    [
      {
        "raw": "postcss-custom-properties@^5.0.0",
        "scope": null,
        "escapedName": "postcss-custom-properties",
        "name": "postcss-custom-properties",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "C:\\Users\\nitesh\\Downloads\\react-contact-manager-master\\react-contact-manager-master\\node_modules\\postcss-cssnext"
    ]
  ],
  "_from": "postcss-custom-properties@>=5.0.0 <6.0.0",
  "_id": "postcss-custom-properties@5.0.2",
  "_inCache": true,
  "_location": "/postcss-custom-properties",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/postcss-custom-properties-5.0.2.tgz_1485930963203_0.6356704095378518"
  },
  "_npmUser": {
    "name": "moox",
    "email": "m@moox.io"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss-custom-properties@^5.0.0",
    "scope": null,
    "escapedName": "postcss-custom-properties",
    "name": "postcss-custom-properties",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/postcss-cssnext"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-custom-properties/-/postcss-custom-properties-5.0.2.tgz",
  "_shasum": "9719d78f2da9cf9f53810aebc23d4656130aceb1",
  "_shrinkwrap": null,
  "_spec": "postcss-custom-properties@^5.0.0",
  "_where": "C:\\Users\\nitesh\\Downloads\\react-contact-manager-master\\react-contact-manager-master\\node_modules\\postcss-cssnext",
  "author": {
    "name": "Maxime Thirouin"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-custom-properties/issues"
  },
  "dependencies": {
    "balanced-match": "^0.4.2",
    "postcss": "^5.0.0"
  },
  "description": "PostCSS plugin to polyfill W3C CSS Custom Properties for cascading variables",
  "devDependencies": {
    "eslint": "^1.0.0",
    "npmpub": "^3.1.0",
    "tape": "^4.0.0"
  },
  "directories": {},
  "dist": {
    "shasum": "9719d78f2da9cf9f53810aebc23d4656130aceb1",
    "tarball": "https://registry.npmjs.org/postcss-custom-properties/-/postcss-custom-properties-5.0.2.tgz"
  },
  "files": [
    "index.js"
  ],
  "gitHead": "317d7387ac262dce0a134a352532e6f2b01034b4",
  "homepage": "https://github.com/postcss/postcss-custom-properties#readme",
  "keywords": [
    "css",
    "postcss",
    "postcss-plugin",
    "custom-properties",
    "variables",
    "vars"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "moox",
      "email": "m@moox.io"
    }
  ],
  "name": "postcss-custom-properties",
  "optionalDependencies": {},
  "readme": "# postcss-custom-properties [![Build Status](https://travis-ci.org/postcss/postcss-custom-properties.svg)](https://travis-ci.org/postcss/postcss-custom-properties)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform [W3C CSS Custom Properties for ~~cascading~~ variables](http://www.w3.org/TR/css-variables/) syntax to more compatible CSS.\n\n_Per w3c specifications, the usage of `var()` is limited to property values. Do not expect the plugin to transform `var()` in media queries or in selectors._\n\n**N.B.** The transformation _is not complete_ and **cannot be** (dynamic *cascading* variables based on custom properties relies on the DOM tree).\nIt currently just aims to provide a future-proof way of using a **limited subset (to `:root` selector)** of the features provided by native CSS custom properties.\n_Since we do not know the DOM in the context of this plugin, we cannot produce safe output_.\nRead [#1](https://github.com/postcss/postcss-custom-properties/issues/1) & [#9](https://github.com/postcss/postcss-custom-properties/issues/9) to know why this limitation exists.\n\n_If you are looking for a full support of CSS custom properties, please follow [the opened issue for runtime support](https://github.com/postcss/postcss-custom-properties/issues/32)._\n\n**N.B.Â²** If you are wondering why there is a different plugin ([`postcss-css-variables`](https://github.com/MadLittleMods/postcss-css-variables)) that claims to do more than this plugin, be sure to understand the explanation above about limitation. This plugins have a behavior that is not [reflecting the specifications](https://github.com/MadLittleMods/postcss-css-variables/issues/4).\n\n_This plugin works great with [postcss-calc](https://github.com/postcss/postcss-calc)._\n\n## Installation\n\n```console\n$ npm install postcss-custom-properties\n```\n\n## Usage\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar customProperties = require(\"postcss-custom-properties\")\n\n// css to be processed\nvar css = fs.readFileSync(\"input.css\", \"utf8\")\n\n// process css using postcss-custom-properties\nvar output = postcss()\n  .use(customProperties())\n  .process(css)\n  .css\n```\n\nUsing this `input.css`:\n\n```css\n:root {\n  --color: red;\n}\n\ndiv {\n  color: var(--color);\n}\n```\n\nyou will get:\n\n```css\ndiv {\n  color: red;\n}\n```\n\nNote that plugin returns itself in order to expose a `setVariables` function\nthat allow you to programmatically change the variables.\n\n```js\nvar variables = {\n  \"--a\": \"b\",\n}\nvar plugin = customProperties()\nplugin.setVariables(variables)\nvar result = postcss()\n  .use(plugin)\n  .process(input)\n```\n\nThis might help for dynamic live/hot reloading.\n\nCheckout [tests](test) for more.\n\n### Options\n\n#### `strict`\n\nDefault: `true`\n\nPer specifications, all fallbacks should be added since we can't verify if a\ncomputed value is valid or not.\nThis option allows you to avoid adding too many fallback values in your CSS.\n\n#### `preserve`\n\nDefault: `false`\n\nAllows you to preserve custom properties & var() usage in output.\n\n```js\nvar out = postcss()\n  .use(customProperties({preserve: true}))\n  .process(css)\n  .css\n```\n\nYou can also set `preserve: \"computed\"` to get computed resolved custom\nproperties in the final output.\nHandy to make them available to your JavaScript.\n\n#### `variables`\n\nDefault: `{}`\n\nAllows you to pass an object of variables for `:root`. These definitions will\noverride any that exist in the CSS.\nThe keys are automatically prefixed with the CSS `--` to make it easier to share\nvariables in your codebase.\n\n#### `appendVariables`\n\nDefault: `false`\n\nIf `preserve` is set to `true` (or `\"computed\"`), allows you to append your\nvariables at the end of your CSS.\n\n#### `warnings`\n\nDefault: `true`\nType: `Boolean|Object`\n\nAllows you to enable/disable warnings. If true, will enable all warnings.\nFor now, it only allow to disable messages about custom properties definition\nnot scoped in a `:root` selector.\n\n---\n\n## Contributing\n\nFork, work on a branch, install dependencies & run tests before submitting a PR.\n\n```console\n$ git clone https://github.com/YOU/postcss-custom-properties.git\n$ git checkout -b patch-1\n$ npm install\n$ npm test\n```\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-custom-properties.git"
  },
  "scripts": {
    "release": "npmpub",
    "test": "eslint . && tape test"
  },
  "version": "5.0.2"
}
