{
  "_args": [
    [
      {
        "raw": "react-css-themr@^1.7.2",
        "scope": null,
        "escapedName": "react-css-themr",
        "name": "react-css-themr",
        "rawSpec": "^1.7.2",
        "spec": ">=1.7.2 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\nitesh\\Downloads\\react-contact-manager-master\\react-contact-manager-master\\node_modules\\react-toolbox"
    ]
  ],
  "_from": "react-css-themr@>=1.7.2 <2.0.0",
  "_id": "react-css-themr@1.7.2",
  "_inCache": true,
  "_location": "/react-css-themr",
  "_nodeVersion": "4.4.3",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-css-themr-1.7.2.tgz_1485602536005_0.1359393736347556"
  },
  "_npmUser": {
    "name": "javivelasco",
    "email": "javier.velasco86@gmail.com"
  },
  "_npmVersion": "3.10.3",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-css-themr@^1.7.2",
    "scope": null,
    "escapedName": "react-css-themr",
    "name": "react-css-themr",
    "rawSpec": "^1.7.2",
    "spec": ">=1.7.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-toolbox"
  ],
  "_resolved": "https://registry.npmjs.org/react-css-themr/-/react-css-themr-1.7.2.tgz",
  "_shasum": "424701383488f63966677f10a908d40861544ef3",
  "_shrinkwrap": null,
  "_spec": "react-css-themr@^1.7.2",
  "_where": "C:\\Users\\nitesh\\Downloads\\react-contact-manager-master\\react-contact-manager-master\\node_modules\\react-toolbox",
  "author": {
    "name": "Javi Velasco",
    "email": "javier.velasco86@gmail.com",
    "url": "http://javivelasco.com/"
  },
  "bugs": {
    "url": "https://github.com/javivelasco/react-css-themr/issues"
  },
  "dependencies": {
    "invariant": "^2.2.1"
  },
  "description": "React CSS Themr",
  "devDependencies": {
    "babel-cli": "^6.7.7",
    "babel-core": "^6.18.0",
    "babel-eslint": "^7.1.1",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-preset-es2015": "^6.18.0",
    "babel-preset-react": "^6.5.0",
    "babel-preset-stage-0": "^6.16.0",
    "eslint": "^3.12.2",
    "eslint-config-rackt": "^1.1.1",
    "eslint-plugin-babel": "^4.0.0",
    "eslint-plugin-react": "^6.8.0",
    "expect": "^1.18.0",
    "fbjs": "^0.8.4",
    "jsdom": "^9.8.3",
    "mocha": "^3.2.0",
    "react": "^15.0.1",
    "react-addons-test-utils": "^15.0.1",
    "react-dom": "^15.3.2",
    "rimraf": "^2.5.2",
    "sinon": "^1.17.6"
  },
  "directories": {},
  "dist": {
    "shasum": "424701383488f63966677f10a908d40861544ef3",
    "tarball": "https://registry.npmjs.org/react-css-themr/-/react-css-themr-1.7.2.tgz"
  },
  "files": [
    "index.d.ts",
    "lib",
    "src"
  ],
  "gitHead": "b2032bb8fa0ba05baaa2f0296ee2cbad9b91ef10",
  "homepage": "https://github.com/javivelasco/react-css-themr#readme",
  "keywords": [
    "css-modules",
    "customization",
    "react",
    "react-css-themr",
    "theming"
  ],
  "license": "MIT",
  "main": "./lib",
  "maintainers": [
    {
      "name": "javivelasco",
      "email": "javier.velasco86@gmail.com"
    }
  ],
  "name": "react-css-themr",
  "optionalDependencies": {},
  "peerDependencies": {
    "react": "^0.14.0 || ^15.0.0-0"
  },
  "readme": "[![npm version](https://img.shields.io/npm/v/react-css-themr.svg?style=flat-square)](https://www.npmjs.com/package/react-css-themr)\n[![Build Status](http://img.shields.io/travis/javivelasco/react-css-themr/master.svg?style=flat-square)](https://travis-ci.org/javivelasco/react-css-themr)\n[![NPM Status](http://img.shields.io/npm/dm/react-css-themr.svg?style=flat-square)](https://www.npmjs.com/package/react-css-themr)\n\n# React CSS Themr\n\nEasy theming and composition for CSS Modules.\n\n```\n$ npm install --save react-css-themr\n```\n\n**Note: Feedback and contributions on the docs are highly appreciated.**\n\n## Why?\n\nWhen you use [CSS Modules](https://github.com/css-modules/css-modules) to style your components, a classnames object is usually imported from the same component. Since css classes are scoped by default, there is no easy way to make your component customizable for the outside world.\n\n## The approach\n\nTaking ideas from [future-react-ui](https://github.com/nikgraf/future-react-ui) and [react-themeable](https://github.com/markdalgleish/react-themeable), a component should be shipped **without** styles. This means we can consider the styles as an **injectable dependency**. In CSS Modules you can consider the imported classnames object as a **theme** for a component. Therefore, every styled component should define a *classname API* to be used in the rendering function.\n\nThe most immediate way of providing a classname object is via *props*. In case you want to import a component with a theme already injected, you have to write a higher order component that does the job. This is ok for your own components, but for ui-kits like [React Toolbox](http://www.react-toolbox.com) or [Belle](http://nikgraf.github.io/belle/), you'd have to write a wrapper for every single component you want to use. In this fancy, you can understand the theme as a **set** of related classname objects for different components. It makes sense to group them together in a single object and move it through the component tree using a context. This way, you can provide a theme either via **context**, **hoc** or **props**.\n\nThe approach of react-css-themr consists of a *provider* and a *decorator*. The provider sets a context theme. The decorator adds to your components the logic to figure out which theme should be used or how should it be composed, depending on configuration, context and props.\n\n## Combining CSS modules\n\nThere are three possible sources for your component. Sorted by priority: **context**, **configuration** and **props**. Any of them can be missing. In case multiple themes are present,  you may want to compose the final classnames object in three different ways:\n\n- *Override*: the theme object with the highest priority is the one used.\n- *Softly merging*: theme objects are merged but if a key is present in more than one object, the final value corresponds to the theme with highest priority.\n- *Deeply merging*: theme objects are merged and if a key is present in more than one object, the values for each objects are concatenated.\n\nYou can choose whatever you want. We consider the last one as the most flexible so it's selected *by default*.\n\n## How does it work?\n\nSay you have a `Button` component you want to make themeable. You should pass a unique name identifier that will be used to retrieve its theme from context in case it is present.\n\n```jsx\n// Button.js\nimport React, { Component } from 'react';\nimport { themr } from 'react-css-themr';\n\n@themr('MyThemedButton')\nclass Button extends Component {\n  render() {\n    const { theme, icon, children } = this.props;\n    return (\n      <button className={theme.button}>\n        { icon ? <i className={theme.icon}>{icon}</i> : null}\n        <span className={theme.content}>{children}</span>\n      </button>\n    )\n  }\n}\n\nexport default Button;\n```\n\nThe component is defining an API for theming that consists of three classnames: button, icon and content. Now, a component can use a button with a success theme like:\n\n```jsx\nimport Button from './Button';\nimport successTheme from './SuccessButton.css';\n\nexport default (props) => (\n  <div {...props}>\n    <p>Do you like it?</p>\n    <Button theme={successTheme}>Yeah!</Button>\n  </div>\n);\n```\n\n### Default theming\n\nIf you use a component with a base theme, you may want to import the component with the theme already injected. Then you can compose its style via props with another theme object. In this case the base css will **always** be bundled:\n\n```jsx\n// SuccessButton.js\nimport React, { Component } from 'react';\nimport { themr } from 'react-css-themr';\nimport successTheme from './SuccessButton.css';\n\n@themr('MySuccessButton', successTheme)\nclass Button extends Component {\n  render() {\n    const { theme, icon, children } = this.props;\n    return (\n      <button className={theme.button}>\n        { icon ? <i className={theme.icon}>{icon}</i> : null}\n        <span className={theme.content}>{children}</span>\n      </button>\n    )\n  }\n}\n\nexport default Button;\n```\n\nImagine you want to make the success button uppercase for a specific case. You can include the classname mixed with other classnames:\n\n```jsx\nimport React from 'react';\nimport SuccessButton from 'SuccessButon';\nimport style from './Section.css';\n\nexport default () => (\n  <section className={style.section}>\n    <SuccessButton theme={style.button}>Yai!</SuccessButton>\n  </section>\n);\n```\n\nAnd being `Section.css` something like:\n\n```scss\n.section { border: 1px solid red; }\n.button  { text-transform: uppercase; }\n```\n\nThe final classnames object for the `Button` component would include class values from `SuccessButton.css` and `Section.css` so it would be uppercase!\n\n### Context theming\n\nAlthough context theming is not limited to ui-kits, it's very useful to avoid declaring hoc for every component. For example, in [react-toolbox](http://www.react-toolbox.com), you can define a context theme like:\n\n```jsx\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { ThemeProvider } from 'react-css-themr';\nimport App from './app'\n\nconst contextTheme = {\n  RTButton: require('react-toolbox/lib/button/style.scss'),\n  RTDialog: require('react-toolbox/lib/dialog/style.scss')\n};\n\nconst content = (\n  <ThemeProvider theme={contextTheme}>\n    <App />\n  </ThemeProvider>\n);\n\nrender(content, document.getElementById('app'));\n```\n\nThe main idea is to inject classnames objects for each component via context. This way you can have the whole theme in a single place and forget about including styles in every require. Any component `Button` or `Dialog` from will use the provided styles in the context.\n\n## API\n\n### `<ThemeProvider theme>`\n\nMakes available a `theme` context to use in styled components. The shape of the theme object consists of an object whose keys are identifiers for styled components provided with the `themr` function with each theme as the corresponding value. Useful for ui-kits.\n\n### `themr(Identifier, [defaultTheme], [options])`\n\nReturns a `function` to wrap a component and make it themeable.\n\nThe returned component accepts a `theme` and `composeTheme`  apart from the props of the original component. They are used to provide a `theme` to the component and to configure the style composition, which can be configured via options too. The function arguments are:\n\n- `Identifier` *(String)* used to provide a unique identifier to the component that will be used to get a theme from context.\n- `[defaultTheme]` (*Object*) is  classname object resolved from CSS modules. It will be used as the default theme to calculate a new theme that will be passed to the component.\n- `[options]` (*Object*) If specified it allows to customize the behavior: \n  - [`composeTheme = 'deeply'`] *(String)* allows to customize the way themes are merged or to disable merging completely. The accepted values are `deeply` to deeply merge themes, `softly` to softly merge themes and `false` to disable theme merging.\n  - [`withRef = false`] *(Boolean)* if true, stores a ref to the wrapped component instance and makes it available via `getWrappedInstance()` method. Defaults to false.\n\n## About\n\nThe project is originally authored by [Javi Velasco](http://www.javivelasco.com) as an effort of providing a better customization experience for [React Toolbox](http://www.react-toolbox.com). Any comments, improvements or feedback is highly appreciated.\n\nThanks to [Nik Graf](http://www.twitter.com/nikgraf) and [Mark Dalgleish](http://www.twitter.com/markdalgleish) for their thoughts about theming and customization for React components.\n\n## License\n\nThis project is licensed under the terms of the [MIT license](https://github.com/javivelasco/react-css-themr/blob/master/LICENSE).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/javivelasco/react-css-themr.git"
  },
  "scripts": {
    "build": "babel src --out-dir lib",
    "lint": "eslint src test",
    "prepublish": "rimraf lib && npm run build",
    "test": "mocha --compilers js:babel-core/register --recursive --reporter spec --require ./test/setup.js",
    "test:watch": "npm test -- --watch"
  },
  "typings": "./index.d.ts",
  "version": "1.7.2"
}
