{
  "_args": [
    [
      {
        "raw": "postcss-import@^9.1.0",
        "scope": null,
        "escapedName": "postcss-import",
        "name": "postcss-import",
        "rawSpec": "^9.1.0",
        "spec": ">=9.1.0 <10.0.0",
        "type": "range"
      },
      "C:\\Users\\nitesh\\Downloads\\react-contact-manager-master\\react-contact-manager-master\\node_modules\\react-toolbox-themr"
    ]
  ],
  "_from": "postcss-import@>=9.1.0 <10.0.0",
  "_id": "postcss-import@9.1.0",
  "_inCache": true,
  "_location": "/react-toolbox-themr/postcss-import",
  "_nodeVersion": "7.4.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/postcss-import-9.1.0.tgz_1484058730608_0.5495064321439713"
  },
  "_npmUser": {
    "name": "ryanzim",
    "email": "opensrc@ryanzim.com"
  },
  "_npmVersion": "4.0.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "postcss-import@^9.1.0",
    "scope": null,
    "escapedName": "postcss-import",
    "name": "postcss-import",
    "rawSpec": "^9.1.0",
    "spec": ">=9.1.0 <10.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/react-toolbox-themr"
  ],
  "_resolved": "https://registry.npmjs.org/postcss-import/-/postcss-import-9.1.0.tgz",
  "_shasum": "95fe9876a1e79af49fbdc3589f01fe5aa7cc1e80",
  "_shrinkwrap": null,
  "_spec": "postcss-import@^9.1.0",
  "_where": "C:\\Users\\nitesh\\Downloads\\react-contact-manager-master\\react-contact-manager-master\\node_modules\\react-toolbox-themr",
  "author": {
    "name": "Maxime Thirouin"
  },
  "bugs": {
    "url": "https://github.com/postcss/postcss-import/issues"
  },
  "dependencies": {
    "object-assign": "^4.0.1",
    "postcss": "^5.0.14",
    "postcss-value-parser": "^3.2.3",
    "promise-each": "^2.2.0",
    "read-cache": "^1.0.0",
    "resolve": "^1.1.7"
  },
  "description": "PostCSS plugin to import CSS files",
  "devDependencies": {
    "ava": "^0.16.0",
    "eslint": "^1.10.3",
    "eslint-config-i-am-meticulous": "^2.0.0",
    "npmpub": "^3.0.1",
    "postcss-scss": "^0.1.3",
    "sugarss": "^0.2.0"
  },
  "directories": {},
  "dist": {
    "shasum": "95fe9876a1e79af49fbdc3589f01fe5aa7cc1e80",
    "tarball": "https://registry.npmjs.org/postcss-import/-/postcss-import-9.1.0.tgz"
  },
  "eslintConfig": {
    "extends": "eslint-config-i-am-meticulous/es5"
  },
  "files": [
    "index.js",
    "lib"
  ],
  "gitHead": "2a687f867ba73e51aa9a838fa3f14e08174786f7",
  "homepage": "https://github.com/postcss/postcss-import#readme",
  "jspm": {
    "name": "postcss-import",
    "main": "index.js",
    "browser": {
      "./lib/load-content": "@empty",
      "./lib/resolve-id": "@empty"
    }
  },
  "keywords": [
    "css",
    "postcss",
    "postcss-plugin",
    "import",
    "node modules",
    "npm"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "moox",
      "email": "m@moox.io"
    },
    {
      "name": "ryanzim",
      "email": "opensrc@ryanzim.com"
    },
    {
      "name": "trysound",
      "email": "trysound@yandex.ru"
    }
  ],
  "name": "postcss-import",
  "optionalDependencies": {},
  "readme": "# postcss-import\n\n[![Unix Build status](https://img.shields.io/travis/postcss/postcss-import/master.svg?branch=master&label=unix%20build)](https://travis-ci.org/postcss/postcss-import)\n[![Windows Build status](https://img.shields.io/appveyor/ci/MoOx/postcss-import/master.svg?label=window%20build)](https://ci.appveyor.com/project/MoOx/postcss-import/branch/master)\n[![Version](https://img.shields.io/npm/v/postcss-import.svg)](https://github.com/postcss/postcss-import/blob/master/CHANGELOG.md)\n\n> [PostCSS](https://github.com/postcss/postcss) plugin to transform `@import`\nrules by inlining content.\n\nThis plugin can consume local files, node modules or web_modules.\nTo resolve path of an `@import` rule, it can look into root directory\n(by default `process.cwd()`), `web_modules`, `node_modules`\nor local modules.\n_When importing a module, it will look for `index.css` or file referenced in\n`package.json` in the `style` or `main` fields._\nYou can also provide manually multiples paths where to look at.\n\n**Notes:**\n\n- **This plugin should probably be used as the first plugin of your list.\nThis way, other plugins will work on the AST as if there were only a single file\nto process, and will probably work as you can expect**.\n- This plugin works great with\n[postcss-url](https://github.com/postcss/postcss-url) plugin,\nwhich will allow you to adjust assets `url()` (or even inline them) after\ninlining imported files.\n- In order to optimize output, **this plugin will only import a file once** on\na given scope (root, media query...).\nTests are made from the path & the content of imported files (using a hash\ntable).\nIf this behavior is not what you want, look at `skipDuplicates` option\n- **If you are looking for glob, or sass like imports (prefixed partials)**,\nplease look at\n[postcss-easy-import](https://github.com/trysound/postcss-easy-import)\n(which use this plugin under the hood).\n- **This plugin attempts to follow the CSS `@import` spec**; `@import`\n  statements must precede all other statements (besides `@charset`).\n\n## Installation\n\n```console\n$ npm install postcss-import\n```\n\n## Usage\n\nIf your stylesheets are not in the same place where you run postcss\n(`process.cwd()`), you will need to use `from` option to make relative imports\nwork from input dirname.\n\n```js\n// dependencies\nvar fs = require(\"fs\")\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\n// css to be processed\nvar css = fs.readFileSync(\"css/input.css\", \"utf8\")\n\n// process css\npostcss()\n  .use(atImport())\n  .process(css, {\n    // `from` option is required so relative import can work from input dirname\n    from: \"css/input.css\"\n  })\n  .then(function (result) {\n    var output = result.css\n\n    console.log(output)\n  })\n```\n\nUsing this `input.css`:\n\n```css\n/* can consume `node_modules`, `web_modules` or local modules */\n@import \"cssrecipes-defaults\"; /* == @import \"./node_modules/cssrecipes-defaults/index.css\"; */\n@import \"normalize.css\"; /* == @import \"./node_modules/normalize.css/normalize.css\"; */\n\n@import \"css/foo.css\"; /* relative to stylesheets/ according to `from` option above */\n\n@import \"css/bar.css\" (min-width: 25em);\n\nbody {\n  background: black;\n}\n```\n\nwill give you:\n\n```css\n/* ... content of ./node_modules/cssrecipes-defaults/index.css */\n/* ... content of ./node_modules/normalize.css/normalize.css */\n\n/* ... content of foo.css */\n\n@media (min-width: 25em) {\n/* ... content of bar.css */\n}\n\nbody {\n  background: black;\n}\n```\n\nCheckout [tests](test) for more examples.\n\n### Options\n\n#### `root`\n\nType: `String`  \nDefault: `process.cwd()` or _dirname of\n[the postcss `from`](https://github.com/postcss/postcss#node-source)_\n\nDefine the root where to resolve path (eg: place where `node_modules` are).\nShould not be used that much.  \n_Note: nested `@import` will additionally benefit of the relative dirname of\nimported files._\n\n#### `path`\n\nType: `String|Array`  \nDefault: `[]`\n\nA string or an array of paths in where to look for files.\n\n#### `plugins`\n\nType: `Array`  \nDefault: `undefined`\n\nAn array of plugins to be applied on each imported files.\n\n#### `onImport`\n\nType: `Function`  \nDefault: `null`\n\nFunction called after the import process. Take one argument (array of imported\nfiles).\n\n#### `resolve`\n\nType: `Function`  \nDefault: `null`\n\nYou can provide a custom path resolver with this option. This function gets\n`(id, basedir, importOptions)` arguments and should return a path, an array of\npaths or a promise resolving to the path(s). If you do not return an absolute\npath, your path will be resolved to an absolute path using the default\nresolver.\nYou can use [resolve](https://github.com/substack/node-resolve) for this.\n\n#### `load`\n\nType: `Function`  \nDefault: null\n\nYou can overwrite the default loading way by setting this option.\nThis function gets `(filename, importOptions)` arguments and returns content or\npromised content.\n\n#### `skipDuplicates`\n\nType: `Boolean`  \nDefault: `true`\n\nBy default, similar files (based on the same content) are being skipped.\nIt's to optimize output and skip similar files like `normalize.css` for example.\nIf this behavior is not what you want, just set this option to `false` to\ndisable it.\n\n#### `addDependencyTo`\n\nType: `Object`  \nDefault: null\n\n**DEPRECATED.** _If you are using postcss-import v8.2.0 & postcss-loader v1.0.0 or later, this is unnecessary._\n\nAn object with `addDependency()` method, taking file path as an argument.\nCalled whenever a file is imported.\nYou can use it for hot-reloading in webpack `postcss-loader` like this:\n\n```js\npostcss: function(webpack) {\n  return [\n    require('postcss-import')({\n      addDependencyTo: webpack\n      /* Is equivalent to\n      onImport: function (files) {\n        files.forEach(this.addDependency)\n      }.bind(webpack)\n      */\n    })\n  ]\n}\n```\n\n#### `addModulesDirectories`\n\nType: `Array`  \nDefault: `[]`\n\nAn array of folder names to add to [Node's resolver](https://github.com/substack/node-resolve).\nValues will be appended to the default resolve directories: \n`[\"node_modules\", \"web_modules\"]`.\n\nThis option is only for adding additional directories to default resolver. If\nyou provide your own resolver via the `resolve` configuration option above, then\nthis value will be ignored.\n\n#### Example with some options\n\n```js\nvar postcss = require(\"postcss\")\nvar atImport = require(\"postcss-import\")\n\npostcss()\n  .use(atImport({\n    path: [\"src/css\"],\n    transform: require(\"css-whitespace\")\n  }))\n  .process(cssString)\n  .then(function (result) {\n    var css = result.css\n  })\n```\n\n### jspm Usage\n\npostcss-import can `@import` [jspm](http://jspm.io) dependencies if\n[`pkg-resolve`](https://www.npmjs.com/package/pkg-resolve) is installed by the\nuser. Run `npm install pkg-resolve` to install it. postcss-import should then be\nable to import from jspm dependencies without further configuration.\n\n## `dependency` Message Support\n\n`postcss-import` adds a message to `result.messages` for each `@import`. Messages are in the following format:\n\n```\n{\n  type: 'dependency',\n  file: absoluteFilePath,\n  parent: fileContainingTheImport\n}\n```\n\nThis is mainly for use by postcss runners that implement file watching.\n\n---\n\n## CONTRIBUTING\n\n* ⇄ Pull requests and ★ Stars are always welcome.\n* For bugs and feature requests, please create an issue.\n* Pull requests must be accompanied by passing automated tests (`$ npm test`).\n\n## [Changelog](CHANGELOG.md)\n\n## [License](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/postcss/postcss-import.git"
  },
  "scripts": {
    "lint": "eslint --fix .",
    "pretest": "npm run lint",
    "release": "npmpub",
    "test": "ava"
  },
  "version": "9.1.0"
}
